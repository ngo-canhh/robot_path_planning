#!/usr/bin/env python3
"""
Script ƒë·ªÉ load v√† l∆∞u h√¨nh ·∫£nh c·ªßa t·∫•t c·∫£ c√°c map ƒë∆∞·ª£c s·ª≠ d·ª•ng khi ch·ªçn scenario 'all'.
H√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c l∆∞u v·ªõi t√™n c√≥ √Ω nghƒ©a v√† t·ªï ch·ª©c theo folder.
"""

import os
import sys
import matplotlib.pyplot as plt
import numpy as np

# Th√™m path c·ªßa th∆∞ m·ª•c algorithms v√†o sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from robot_env.indoor_robot_env import IndoorRobotEnv
from components.maps import maps
from components.maps import get_empty_map

def save_map_images():
    """L∆∞u h√¨nh ·∫£nh c·ªßa t·∫•t c·∫£ c√°c map trong scenario 'all'"""
    
    # T·∫°o folder ch√≠nh ƒë·ªÉ l∆∞u h√¨nh ·∫£nh
    output_dir = "map_images"
    os.makedirs(output_dir, exist_ok=True)
    
    # C√°c lo·∫°i map types khi ch·ªçn scenario 'all'
    map_types = ["maze", "dense", "room", "trap", "real"]
    
    # Tham s·ªë chung
    start_pos = (64, 500)  # V·ªã tr√≠ b·∫Øt ƒë·∫ßu nh∆∞ trong main.py
    goal_pos = (470, 180)  # V·ªã tr√≠ ƒë√≠ch nh∆∞ trong main.py
    
    print("=== B·∫ÆT ƒê·∫¶U L∆ØU H√åNH ·∫¢NH C√ÅC MAP ===")
    
    # L·∫∑p qua t·ª´ng lo·∫°i map
    for map_type in map_types:
        print(f"\n--- X·ª≠ l√Ω map type: {map_type} ---")
        
        # T·∫°o folder cho t·ª´ng lo·∫°i map
        map_type_dir = os.path.join(output_dir, map_type)
        os.makedirs(map_type_dir, exist_ok=True)
        
        # T√¨m t·∫•t c·∫£ map c·ªßa lo·∫°i n√†y
        map_names = [key for key in maps.keys() if key.startswith(map_type)]
        
        # S·∫Øp x·∫øp theo s·ªë th·ª© t·ª±
        map_names.sort(key=lambda x: int(x[len(map_type):]) if x[len(map_type):].isdigit() else 0)
        
        print(f"T√¨m th·∫•y {len(map_names)} map: {map_names}")
        
        # X·ª≠ l√Ω t·ª´ng map
        for map_name in map_names:
            print(f"  ƒêang x·ª≠ l√Ω map: {map_name}")
            
            try:
                # T·∫°o environment v·ªõi human mode ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã
                env = IndoorRobotEnv(
                    robot_radius=3,
                    max_steps=500,
                    sensor_range=50,
                    render_mode='human',  # D√πng human mode ƒë·ªÉ t·∫°o figure
                    config_path=get_empty_map(530),
                    metrics_callback=None,
                )
                
                # Th√™m obstacles t·ª´ map
                env.add_obstacles(maps[map_name])
                
                # Set v·ªã tr√≠ start v√† goal
                env.start = start_pos
                env.goal = goal_pos
                
                # Reset environment ƒë·ªÉ initialize
                observation, info = env.reset(seed=88)  # D√πng seed c·ªë ƒë·ªãnh ƒë·ªÉ nh·∫•t qu√°n
                
                # Render ƒë·ªÉ t·∫°o visualization
                env.render()
                
                # L∆∞u figure hi·ªán t·∫°i
                if env.fig is not None:
                    # ƒê∆∞·ªùng d·∫´n l∆∞u file
                    image_path = os.path.join(map_type_dir, f"{map_name}.png")
                    
                    # L∆∞u v·ªõi DPI cao
                    env.fig.savefig(image_path, dpi=300, bbox_inches='tight', pad_inches=0.1)
                    
                    print(f"    ‚úì ƒê√£ l∆∞u: {image_path}")
                else:
                    print(f"    ‚úó Figure is None cho map: {map_name}")
                
                # ƒê√≥ng environment
                env.close()
                
            except Exception as e:
                print(f"    ‚úó L·ªói khi x·ª≠ l√Ω map {map_name}: {e}")
                import traceback
                traceback.print_exc()
                continue
    
    print(f"\n=== HO√ÄN TH√ÄNH ===")
    print(f"T·∫•t c·∫£ h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c l∆∞u trong folder: {output_dir}")
    print("C·∫•u tr√∫c folder:")
    for map_type in map_types:
        map_type_dir = os.path.join(output_dir, map_type)
        if os.path.exists(map_type_dir):
            files = [f for f in os.listdir(map_type_dir) if f.endswith('.png')]
            print(f"  {map_type}/: {len(files)} h√¨nh ·∫£nh")


def save_single_map_image(map_name):
    """Test function ƒë·ªÉ l∆∞u h√¨nh ·∫£nh m·ªôt map"""
    print(f"=== TEST: L∆∞u h√¨nh ·∫£nh map {map_name} ===")
    
    try:
        # T·∫°o environment v·ªõi human mode ƒë·ªÉ c√≥ th·ªÉ hi·ªÉn th·ªã
        env = IndoorRobotEnv(
            robot_radius=3,
            max_steps=500,
            sensor_range=50,
            render_mode='human',
            config_path=get_empty_map(530),
            metrics_callback=None,
        )
        
        # Th√™m obstacles t·ª´ map
        env.add_obstacles(maps[map_name])
        
        # Set v·ªã tr√≠ start v√† goal
        env.start = (64, 500)
        env.goal = (470, 180)
        
        # Reset environment
        observation, info = env.reset(seed=88)
        
        # Render ƒë·ªÉ t·∫°o visualization
        env.render()
        
        # L∆∞u figure hi·ªán t·∫°i
        if env.fig is not None:
            output_path = f"test_{map_name}.png"
            env.fig.savefig(output_path, dpi=300, bbox_inches='tight')
            print(f"‚úì ƒê√£ l∆∞u test image: {output_path}")
        else:
            print("‚úó Figure is None")
        
        # ƒê√≥ng environment
        env.close()
        
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        import traceback
        traceback.print_exc()


def create_summary_grid():
    """T·∫°o grid t·ªïng h·ª£p t·∫•t c·∫£ c√°c map trong m·ªôt h√¨nh ·∫£nh"""
    print("\n=== T·∫†O GRID T·ªîNG H·ª¢P ===")
    
    output_dir = "map_images"
    map_types = ["maze", "dense", "room", "trap", "real"]
    
    # T√≠nh s·ªë h√†ng v√† c·ªôt cho grid
    total_maps = sum(len([key for key in maps.keys() if key.startswith(map_type)]) for map_type in map_types)
    cols = min(6, total_maps)  # T·ªëi ƒëa 6 c·ªôt
    rows = (total_maps + cols - 1) // cols  # T√≠nh s·ªë h√†ng c·∫ßn thi·∫øt
    
    print(f"T·∫°o grid {rows}x{cols} cho {total_maps} maps")
    
    # T·∫°o figure l·ªõn
    fig, axes = plt.subplots(rows, cols, figsize=(20, rows * 3))
    fig.suptitle('T·ªïng h·ª£p t·∫•t c·∫£ Maps trong Scenario "All"', fontsize=20, fontweight='bold')
    
    # Flatten axes n·∫øu c·∫ßn
    if rows == 1:
        axes = [axes] if cols == 1 else axes
    else:
        axes = axes.flatten()
    
    plot_idx = 0
    
    # Duy·ªát qua t·ª´ng map type v√† map
    for map_type in map_types:
        map_names = [key for key in maps.keys() if key.startswith(map_type)]
        map_names.sort(key=lambda x: int(x[len(map_type):]) if x[len(map_type):].isdigit() else 0)
        
        for map_name in map_names:
            if plot_idx >= len(axes):
                break
                
            image_path = os.path.join(output_dir, map_type, f"{map_name}.png")
            
            try:
                if os.path.exists(image_path):
                    # Load v√† hi·ªÉn th·ªã h√¨nh ·∫£nh
                    img = plt.imread(image_path)
                    axes[plot_idx].imshow(img)
                    axes[plot_idx].set_title(f'{map_name}', fontsize=12, fontweight='bold')
                    axes[plot_idx].axis('off')
                else:
                    # N·∫øu kh√¥ng c√≥ h√¨nh ·∫£nh, t·∫°o placeholder
                    axes[plot_idx].text(0.5, 0.5, f'No image\n{map_name}', 
                                      ha='center', va='center', transform=axes[plot_idx].transAxes)
                    axes[plot_idx].set_title(f'{map_name}', fontsize=12)
                    axes[plot_idx].axis('off')
                    
            except Exception as e:
                print(f"L·ªói khi load h√¨nh ·∫£nh {map_name}: {e}")
                axes[plot_idx].text(0.5, 0.5, f'Error\n{map_name}', 
                                  ha='center', va='center', transform=axes[plot_idx].transAxes)
                axes[plot_idx].set_title(f'{map_name}', fontsize=12)
                axes[plot_idx].axis('off')
            
            plot_idx += 1
    
    # ·∫®n c√°c subplot kh√¥ng s·ª≠ d·ª•ng
    for i in range(plot_idx, len(axes)):
        axes[i].axis('off')
    
    # L∆∞u grid t·ªïng h·ª£p
    grid_path = os.path.join(output_dir, "all_maps_grid.png")
    plt.tight_layout()
    plt.savefig(grid_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"‚úì ƒê√£ t·∫°o grid t·ªïng h·ª£p: {grid_path}")


if __name__ == "__main__":
    # Test v·ªõi m·ªôt map tr∆∞·ªõc
    print("=== TEST v·ªõi m·ªôt map tr∆∞·ªõc ===")
    save_single_map_image("maze1")
    
    # N·∫øu test th√†nh c√¥ng th√¨ ch·∫°y full
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c v·ªõi t·∫•t c·∫£ maps...")
    
    # L∆∞u t·ª´ng h√¨nh ·∫£nh map ri√™ng l·∫ª
    save_map_images()
    
    # T·∫°o grid t·ªïng h·ª£p
    create_summary_grid()
    
    print("\nüéâ Ho√†n th√†nh vi·ªác l∆∞u h√¨nh ·∫£nh t·∫•t c·∫£ c√°c map!") 